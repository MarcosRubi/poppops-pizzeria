---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=League+Spartan:wght@300;600;900&display=swap"
			rel="stylesheet"
		/>
	</head>
	<body class="relative">
		<slot />
	</body>
</html>
<style is:global lang="scss">
	:root {
		--black: #212121;
		--white: #fff;
	}
	*,
	*::before,
	*::after {
		min-width: 0;
		min-height: 0;
		background-position: center center;
		background-repeat: no-repeat;
		object-position: center center;
	}

	*:focus,
	*:-moz-focusring {
		outline: 0;
	}

	html {
		line-height: 1;
	}

	body {
		text-align: left;
		background-color: var(--black);
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		font-size: 20px;
		font-family: 'League Spartan', sans-serif;
		color: var(--white);
	}

	li {
		list-style-type: none;
	}

	ol li,
	ul li {
		list-style-type: inherit;
	}
	img{
		max-width: 100%;
	}

	code,
	pre,
	kbd,
	samp {
		font-family: inherit;
	}

	b,
	strong {
		font-weight: inherit;
	}

	address,
	cite,
	dfn,
	em,
	i,
	var {
		font-style: inherit;
	}

	del,
	ins,
	s,
	u {
		text-decoration: none;
	}

	mark {
		background-color: transparent;
		color: inherit;
	}

	q {
		quotes: "“" "”" "‘" "’";
	}

	q::before {
		content: open-quote;
	}

	q::after {
		content: close-quote;
	}

	small,
	sub,
	sup {
		font-size: inherit;
	}

	svg:not([fill]) {
		fill: currentColor;
	}

	caption,
	th {
		text-align: inherit;
	}

	th {
		font-weight: inherit;
	}

	table {
		border-spacing: 0;
	}

	button {
		border-radius: 0;
		font-weight: inherit;
		text-align: inherit;
		text-transform: inherit;
		letter-spacing: inherit;
	}

	select {
		text-transform: inherit;
	}

	input[type="button"],
	input[type="reset"],
	input[type="submit"] {
		text-align: inherit;
		cursor: pointer;
	}

	input[type="number"]::-webkit-inner-spin-button,
	input[type="number"]::-webkit-outer-spin-button {
		opacity: 1;
	}

	button:focus,
	input[type="button"]:focus,
	input[type="reset"]:focus,
	input[type="submit"]:focus {
		outline: 0;
	}

	input::placeholder,
	textarea::placeholder {
		color: inherit;
		opacity: 0.625;
	}

	script,
	[hidden] {
		display: none !important;
	}

	.container {
		max-width: 1440px;
		width: 95%;
		margin: 0 auto;
	}

	.d-flex {
		display: flex;
	}
	.d-block{
		display: block;
	}
	.flex-column{
		flex-direction: column;
	}
	.align-center {
		align-items: center;
	}

	.justify-between {
		justify-content: space-between;
	}
	.justify-center{
		justify-content: center;
	}
	.btn {
		padding: 1rem 2rem;
		max-width: 15rem;
		border:none;
		outline: none;
	}
	.btn-primary {
		background-color: var(--white);
		color: var(--black);
	}
	.rounded{
		border-radius: 2rem;
	}
	.fixed {
		position: fixed;
	}
	.relative {
		position: relative;
	}
	.top-0 {
		top: 0;
	}
	.left-0 {
		left: 0;
	}
	.w-screen,
	.w-screen-sm {
		width: 100vw;
	}
	.bg-black{
		background-color: var(--black);
	}

	.text-lg{
		font-size: 1.25rem;
	}
	.text-xl{
		font-size: 2rem;
	}
	.bold{
		font-weight: 600;
	}

	.bg-white{
		background-color: var(--white);
	}
	.p-absolute{
		position: absolute;
	}	
	.p-relative{
		position: relative;
	}

	@media (min-width:768px) {
		.w-screen-sm{
			width: auto;
		}
		header{
			border-bottom: 1px solid var(--white);
		}
	}

	@media (min-width:1024px){
		.d-flex-lg{
			display: flex;
		}
	}
</style>
